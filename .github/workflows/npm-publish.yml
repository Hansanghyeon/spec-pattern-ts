name: NPM Publish

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Check version change
        id: version-check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD package.json
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.version-check.outputs.version_changed == 'true'
        run: bun install --frozen-lockfile

      - name: Build
        if: steps.version-check.outputs.version_changed == 'true'
        run: bun run build

      - name: Run tests
        if: steps.version-check.outputs.version_changed == 'true'
        run: bun test

      - name: Publish to NPM
        if: steps.version-check.outputs.version_changed == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js for GitHub Packages
        if: steps.version-check.outputs.version_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@hansanghyeon'

      - name: Publish to GitHub Packages
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          # Create temporary package.json for GitHub Packages
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.name = '@hansanghyeon/spec-pattern-ts';
            delete pkg.publishConfig;
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          # Publish to GitHub Packages
          npm publish --registry https://npm.pkg.github.com/
          # Restore original package.json
          git checkout HEAD -- package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.new_version }}
          release_name: Release v${{ steps.version-check.outputs.new_version }}
          draft: false
          prerelease: false